/*B. Кезек
time limit per test1 second
memory limit per test256 megabytes
«Кезек» деректер құрылымын енгізіңіз. Мұнда көрсетілген барлық әдістерді жүзеге асыра отырып, кезектің сипаттамасын және кезек жұмысын модельдейтін бағдарламаны жазыңыз. Бағдарлама командалар тізбегін оқиды және командаға байланысты сол немесе басқа операцияны орындайды. Әрбір команданы орындағаннан кейін бағдарлама бір жолды басып шығаруы керек. Бағдарламаның мүмкін командалары:

Команды:

push n — Кезекке n санын қосыңыз (n мәні командадан кейін көрсетіледі). Бағдарлама «ok» деп шығуы керек.
pop — Бірінші элементті кезектен алып тастаңыз. Бағдарлама өз мәнін басып шығаруы керек.
front — Бағдарлама бірінші элементтің мәнін кезектен шығармай басып шығаруы керек.
size — Бағдарлама кезектегі элементтердің санын көрсетуі керек.
clear — Бағдарлама кезекті тазартып, «ok» басып шығаруы керек.
exit — Бағдарлама «bye» деп басып шығарып, шығуы керек.
Енгізу пәрмендерінің жиыны келесі талаптарды қанағаттандыратынына кепілдік беріледі: кез келген уақытта кезекте тұрған элементтердің максималды саны 100-ден аспайды, барлық pop және front командалары дұрыс, яғни олар орындалған кезде, кезек мынаны қамтиды: кем дегенде бір элемент.

Input
Кезекті басқару пәрмендері әр жолға бірден енгізіледі

Output
Кезекпен жұмыс журналын көрсету қажет, әр жолға бір хабарлама

Example
InputCopy
push 3
push 14
size
clear
push 1
front
push 2
front
pop
size
pop
size
exit
OutputCopy
ok
ok
2
ok
ok
1
ok
1
1
1
2
0
bye

*/
#include<bits/stdc++.h>
using namespace std;
int main(){
    queue<int> q;
    string s;
    while(cin >> s){
        if(s == "push"){
            int n;
            cin >> n;
            q.push(n);
            cout << "ok" << endl;
        }
        else if(s == "pop"){
            cout << q.front() << endl;
            q.pop();
        }
        else if(s == "front"){
            cout << q.front() << endl;
        }
        else if(s == "size"){
            cout << q.size() << endl;
        }
        else if(s == "clear"){
            while(!q.empty()){
                q.pop();
            }
            cout << "ok" << endl;
        }
        else if(s == "exit"){
            cout << "bye" << endl;
            break;
        }
    }
    return 0;
}