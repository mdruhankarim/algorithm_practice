/*F. Дота
time limit per test1 second
memory limit per test256 megabytes
Dota2 әлемінде екі жағы бар: Radiant және Dire.

Dota2 Сенаты екі партияның сенаторларынан тұрады. Енді сенат Dota2 ойынына өзгерістер енгізу туралы шешім қабылдағысы келеді. Бұл өзгеріске дауыс беру - дөңгелек жүйе. Әрбір раундта әрбір сенатор екі құқықтың бірін пайдалана алады:

Бір сенатордың құқығынан бас тарту: Сенатор осы және одан кейінгі барлық раундтарда басқа сенатордың барлық құқықтарынан бас тарта алады. Жеңісті жариялау: Егер бұл сенатор әлі де дауыс беруге құқығы бар барлық сенаторлар бір партияға тиесілі екенін анықтаса, ол жеңісін жариялап, ойынды өзгерту туралы шешім қабылдай алады. Әрбір сенатордың партиялық тиістілігін білдіретін сенат жолы берілген. «R» және «D» таңбалары «Radiant» бөлігін және «Dire» бөлігін білдіреді. Сонда n
 сенаторлар болса, бұл жолдың өлшемі n
 болады.

Раунд рәсімі берілген тәртіп бойынша бірінші сенатордан соңғы сенаторға дейін басталады. Бұл процедура дауыс беру аяқталғанша жалғасады. Процедура барысында құқығынан айырылған барлық сенаторлар өткізілмейді.

Әрбір сенатор өз партиясы үшін ең жақсы стратегияны қолдана алатындай ақылды деп есептейік. Қай тараптың жеңісті жариялайтынын болжап, Dota2 ойынын өзгертіңіз. Нәтиже «Radiant» немесе «Dire» болуы керек.

Input
Жалғыз жол s
 (1≤s.size()≤104)
 жолын береді — құрамында тек 'R' және 'D' таңбалары бар.

Output
Нәтиже «Radiant» немесе «Dire» болуы керек.

Examples
InputCopy
RD
OutputCopy
Radiant
InputCopy
RDD
OutputCopy
Dire*/
#include<bits/stdc++.h>
using namespace std;
int main() {
    string s;
    cin >> s;
    queue<int> radiant, dire;
    for (int i = 0; i < s.size(); i++) {
        if (s[i] == 'R') {
            radiant.push(i);
        } else {
            dire.push(i);
        }
    }
    while (!radiant.empty() && !dire.empty()) {
        int r_idx = radiant.front();
        int d_idx = dire.front();
        if (r_idx < d_idx) {
            radiant.pop();
            dire.pop();
            radiant.push(r_idx + s.size());
        } else {
            dire.pop();
            radiant.pop();
            dire.push(d_idx + s.size());
        }
    }
    if (radiant.empty()) {
        cout << "Dire" << endl;
    } else {
        cout << "Radiant" << endl;
    }
    return 0;
}